// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"hasdsd.cn/op-dl-server/model"
)

func newEventTag(db *gorm.DB, opts ...gen.DOOption) eventTag {
	_eventTag := eventTag{}

	_eventTag.eventTagDo.UseDB(db, opts...)
	_eventTag.eventTagDo.UseModel(&model.EventTag{})

	tableName := _eventTag.eventTagDo.TableName()
	_eventTag.ALL = field.NewAsterisk(tableName)
	_eventTag.ID = field.NewInt64(tableName, "id")
	_eventTag.EventID = field.NewInt64(tableName, "event_id")
	_eventTag.TagID = field.NewInt64(tableName, "tag_id")
	_eventTag.CreatedAt = field.NewTime(tableName, "created_at")
	_eventTag.UpdatedAt = field.NewTime(tableName, "updated_at")
	_eventTag.DeletedAt = field.NewField(tableName, "deleted_at")

	_eventTag.fillFieldMap()

	return _eventTag
}

type eventTag struct {
	eventTagDo

	ALL       field.Asterisk
	ID        field.Int64
	EventID   field.Int64
	TagID     field.Int64
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (e eventTag) Table(newTableName string) *eventTag {
	e.eventTagDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e eventTag) As(alias string) *eventTag {
	e.eventTagDo.DO = *(e.eventTagDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *eventTag) updateTableName(table string) *eventTag {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.EventID = field.NewInt64(table, "event_id")
	e.TagID = field.NewInt64(table, "tag_id")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.UpdatedAt = field.NewTime(table, "updated_at")
	e.DeletedAt = field.NewField(table, "deleted_at")

	e.fillFieldMap()

	return e
}

func (e *eventTag) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *eventTag) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 6)
	e.fieldMap["id"] = e.ID
	e.fieldMap["event_id"] = e.EventID
	e.fieldMap["tag_id"] = e.TagID
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["updated_at"] = e.UpdatedAt
	e.fieldMap["deleted_at"] = e.DeletedAt
}

func (e eventTag) clone(db *gorm.DB) eventTag {
	e.eventTagDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e eventTag) replaceDB(db *gorm.DB) eventTag {
	e.eventTagDo.ReplaceDB(db)
	return e
}

type eventTagDo struct{ gen.DO }

type IEventTagDo interface {
	gen.SubQuery
	Debug() IEventTagDo
	WithContext(ctx context.Context) IEventTagDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEventTagDo
	WriteDB() IEventTagDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEventTagDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEventTagDo
	Not(conds ...gen.Condition) IEventTagDo
	Or(conds ...gen.Condition) IEventTagDo
	Select(conds ...field.Expr) IEventTagDo
	Where(conds ...gen.Condition) IEventTagDo
	Order(conds ...field.Expr) IEventTagDo
	Distinct(cols ...field.Expr) IEventTagDo
	Omit(cols ...field.Expr) IEventTagDo
	Join(table schema.Tabler, on ...field.Expr) IEventTagDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEventTagDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEventTagDo
	Group(cols ...field.Expr) IEventTagDo
	Having(conds ...gen.Condition) IEventTagDo
	Limit(limit int) IEventTagDo
	Offset(offset int) IEventTagDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEventTagDo
	Unscoped() IEventTagDo
	Create(values ...*model.EventTag) error
	CreateInBatches(values []*model.EventTag, batchSize int) error
	Save(values ...*model.EventTag) error
	First() (*model.EventTag, error)
	Take() (*model.EventTag, error)
	Last() (*model.EventTag, error)
	Find() ([]*model.EventTag, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EventTag, err error)
	FindInBatches(result *[]*model.EventTag, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EventTag) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEventTagDo
	Assign(attrs ...field.AssignExpr) IEventTagDo
	Joins(fields ...field.RelationField) IEventTagDo
	Preload(fields ...field.RelationField) IEventTagDo
	FirstOrInit() (*model.EventTag, error)
	FirstOrCreate() (*model.EventTag, error)
	FindByPage(offset int, limit int) (result []*model.EventTag, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEventTagDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e eventTagDo) Debug() IEventTagDo {
	return e.withDO(e.DO.Debug())
}

func (e eventTagDo) WithContext(ctx context.Context) IEventTagDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e eventTagDo) ReadDB() IEventTagDo {
	return e.Clauses(dbresolver.Read)
}

func (e eventTagDo) WriteDB() IEventTagDo {
	return e.Clauses(dbresolver.Write)
}

func (e eventTagDo) Session(config *gorm.Session) IEventTagDo {
	return e.withDO(e.DO.Session(config))
}

func (e eventTagDo) Clauses(conds ...clause.Expression) IEventTagDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e eventTagDo) Returning(value interface{}, columns ...string) IEventTagDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e eventTagDo) Not(conds ...gen.Condition) IEventTagDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e eventTagDo) Or(conds ...gen.Condition) IEventTagDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e eventTagDo) Select(conds ...field.Expr) IEventTagDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e eventTagDo) Where(conds ...gen.Condition) IEventTagDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e eventTagDo) Order(conds ...field.Expr) IEventTagDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e eventTagDo) Distinct(cols ...field.Expr) IEventTagDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e eventTagDo) Omit(cols ...field.Expr) IEventTagDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e eventTagDo) Join(table schema.Tabler, on ...field.Expr) IEventTagDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e eventTagDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEventTagDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e eventTagDo) RightJoin(table schema.Tabler, on ...field.Expr) IEventTagDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e eventTagDo) Group(cols ...field.Expr) IEventTagDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e eventTagDo) Having(conds ...gen.Condition) IEventTagDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e eventTagDo) Limit(limit int) IEventTagDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e eventTagDo) Offset(offset int) IEventTagDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e eventTagDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEventTagDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e eventTagDo) Unscoped() IEventTagDo {
	return e.withDO(e.DO.Unscoped())
}

func (e eventTagDo) Create(values ...*model.EventTag) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e eventTagDo) CreateInBatches(values []*model.EventTag, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e eventTagDo) Save(values ...*model.EventTag) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e eventTagDo) First() (*model.EventTag, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EventTag), nil
	}
}

func (e eventTagDo) Take() (*model.EventTag, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EventTag), nil
	}
}

func (e eventTagDo) Last() (*model.EventTag, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EventTag), nil
	}
}

func (e eventTagDo) Find() ([]*model.EventTag, error) {
	result, err := e.DO.Find()
	return result.([]*model.EventTag), err
}

func (e eventTagDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EventTag, err error) {
	buf := make([]*model.EventTag, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e eventTagDo) FindInBatches(result *[]*model.EventTag, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e eventTagDo) Attrs(attrs ...field.AssignExpr) IEventTagDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e eventTagDo) Assign(attrs ...field.AssignExpr) IEventTagDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e eventTagDo) Joins(fields ...field.RelationField) IEventTagDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e eventTagDo) Preload(fields ...field.RelationField) IEventTagDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e eventTagDo) FirstOrInit() (*model.EventTag, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EventTag), nil
	}
}

func (e eventTagDo) FirstOrCreate() (*model.EventTag, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EventTag), nil
	}
}

func (e eventTagDo) FindByPage(offset int, limit int) (result []*model.EventTag, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e eventTagDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e eventTagDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e eventTagDo) Delete(models ...*model.EventTag) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *eventTagDo) withDO(do gen.Dao) *eventTagDo {
	e.DO = *do.(*gen.DO)
	return e
}
