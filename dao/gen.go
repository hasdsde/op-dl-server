// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                = new(Query)
	Daily            *daily
	Event            *event
	EventTag         *eventTag
	Tag              *tag
	User             *user
	UserEvent        *userEvent
	UserPrivate      *userPrivate
	UserVersionEvent *userVersionEvent
	Version          *version
	VersionEvent     *versionEvent
	VersionTag       *versionTag
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Daily = &Q.Daily
	Event = &Q.Event
	EventTag = &Q.EventTag
	Tag = &Q.Tag
	User = &Q.User
	UserEvent = &Q.UserEvent
	UserPrivate = &Q.UserPrivate
	UserVersionEvent = &Q.UserVersionEvent
	Version = &Q.Version
	VersionEvent = &Q.VersionEvent
	VersionTag = &Q.VersionTag
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:               db,
		Daily:            newDaily(db, opts...),
		Event:            newEvent(db, opts...),
		EventTag:         newEventTag(db, opts...),
		Tag:              newTag(db, opts...),
		User:             newUser(db, opts...),
		UserEvent:        newUserEvent(db, opts...),
		UserPrivate:      newUserPrivate(db, opts...),
		UserVersionEvent: newUserVersionEvent(db, opts...),
		Version:          newVersion(db, opts...),
		VersionEvent:     newVersionEvent(db, opts...),
		VersionTag:       newVersionTag(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Daily            daily
	Event            event
	EventTag         eventTag
	Tag              tag
	User             user
	UserEvent        userEvent
	UserPrivate      userPrivate
	UserVersionEvent userVersionEvent
	Version          version
	VersionEvent     versionEvent
	VersionTag       versionTag
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:               db,
		Daily:            q.Daily.clone(db),
		Event:            q.Event.clone(db),
		EventTag:         q.EventTag.clone(db),
		Tag:              q.Tag.clone(db),
		User:             q.User.clone(db),
		UserEvent:        q.UserEvent.clone(db),
		UserPrivate:      q.UserPrivate.clone(db),
		UserVersionEvent: q.UserVersionEvent.clone(db),
		Version:          q.Version.clone(db),
		VersionEvent:     q.VersionEvent.clone(db),
		VersionTag:       q.VersionTag.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:               db,
		Daily:            q.Daily.replaceDB(db),
		Event:            q.Event.replaceDB(db),
		EventTag:         q.EventTag.replaceDB(db),
		Tag:              q.Tag.replaceDB(db),
		User:             q.User.replaceDB(db),
		UserEvent:        q.UserEvent.replaceDB(db),
		UserPrivate:      q.UserPrivate.replaceDB(db),
		UserVersionEvent: q.UserVersionEvent.replaceDB(db),
		Version:          q.Version.replaceDB(db),
		VersionEvent:     q.VersionEvent.replaceDB(db),
		VersionTag:       q.VersionTag.replaceDB(db),
	}
}

type queryCtx struct {
	Daily            IDailyDo
	Event            IEventDo
	EventTag         IEventTagDo
	Tag              ITagDo
	User             IUserDo
	UserEvent        IUserEventDo
	UserPrivate      IUserPrivateDo
	UserVersionEvent IUserVersionEventDo
	Version          IVersionDo
	VersionEvent     IVersionEventDo
	VersionTag       IVersionTagDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Daily:            q.Daily.WithContext(ctx),
		Event:            q.Event.WithContext(ctx),
		EventTag:         q.EventTag.WithContext(ctx),
		Tag:              q.Tag.WithContext(ctx),
		User:             q.User.WithContext(ctx),
		UserEvent:        q.UserEvent.WithContext(ctx),
		UserPrivate:      q.UserPrivate.WithContext(ctx),
		UserVersionEvent: q.UserVersionEvent.WithContext(ctx),
		Version:          q.Version.WithContext(ctx),
		VersionEvent:     q.VersionEvent.WithContext(ctx),
		VersionTag:       q.VersionTag.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
