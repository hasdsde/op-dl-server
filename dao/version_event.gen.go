// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"hasdsd.cn/op-dl-server/model"
)

func newVersionEvent(db *gorm.DB, opts ...gen.DOOption) versionEvent {
	_versionEvent := versionEvent{}

	_versionEvent.versionEventDo.UseDB(db, opts...)
	_versionEvent.versionEventDo.UseModel(&model.VersionEvent{})

	tableName := _versionEvent.versionEventDo.TableName()
	_versionEvent.ALL = field.NewAsterisk(tableName)
	_versionEvent.ID = field.NewInt64(tableName, "id")
	_versionEvent.VersionNum = field.NewInt64(tableName, "version_num")
	_versionEvent.Title = field.NewString(tableName, "title")
	_versionEvent.Tag = field.NewInt64(tableName, "tag")
	_versionEvent.Content = field.NewString(tableName, "content")
	_versionEvent.Level = field.NewInt64(tableName, "level")
	_versionEvent.CreatedAt = field.NewTime(tableName, "created_at")
	_versionEvent.UpdatedAt = field.NewTime(tableName, "updated_at")
	_versionEvent.DeletedAt = field.NewField(tableName, "deleted_at")
	_versionEvent.StartTime = field.NewTime(tableName, "start_time")
	_versionEvent.EndTime = field.NewTime(tableName, "end_time")
	_versionEvent.TodoNum = field.NewInt64(tableName, "todo_num")

	_versionEvent.fillFieldMap()

	return _versionEvent
}

type versionEvent struct {
	versionEventDo

	ALL        field.Asterisk
	ID         field.Int64
	VersionNum field.Int64  // 版本号
	Title      field.String // 标题
	Tag        field.Int64  // 标签
	Content    field.String // 内容
	Level      field.Int64  // 级别
	CreatedAt  field.Time
	UpdatedAt  field.Time
	DeletedAt  field.Field
	StartTime  field.Time  // 开始时间
	EndTime    field.Time  // 结束时间
	TodoNum    field.Int64 // todo空位

	fieldMap map[string]field.Expr
}

func (v versionEvent) Table(newTableName string) *versionEvent {
	v.versionEventDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v versionEvent) As(alias string) *versionEvent {
	v.versionEventDo.DO = *(v.versionEventDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *versionEvent) updateTableName(table string) *versionEvent {
	v.ALL = field.NewAsterisk(table)
	v.ID = field.NewInt64(table, "id")
	v.VersionNum = field.NewInt64(table, "version_num")
	v.Title = field.NewString(table, "title")
	v.Tag = field.NewInt64(table, "tag")
	v.Content = field.NewString(table, "content")
	v.Level = field.NewInt64(table, "level")
	v.CreatedAt = field.NewTime(table, "created_at")
	v.UpdatedAt = field.NewTime(table, "updated_at")
	v.DeletedAt = field.NewField(table, "deleted_at")
	v.StartTime = field.NewTime(table, "start_time")
	v.EndTime = field.NewTime(table, "end_time")
	v.TodoNum = field.NewInt64(table, "todo_num")

	v.fillFieldMap()

	return v
}

func (v *versionEvent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *versionEvent) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 12)
	v.fieldMap["id"] = v.ID
	v.fieldMap["version_num"] = v.VersionNum
	v.fieldMap["title"] = v.Title
	v.fieldMap["tag"] = v.Tag
	v.fieldMap["content"] = v.Content
	v.fieldMap["level"] = v.Level
	v.fieldMap["created_at"] = v.CreatedAt
	v.fieldMap["updated_at"] = v.UpdatedAt
	v.fieldMap["deleted_at"] = v.DeletedAt
	v.fieldMap["start_time"] = v.StartTime
	v.fieldMap["end_time"] = v.EndTime
	v.fieldMap["todo_num"] = v.TodoNum
}

func (v versionEvent) clone(db *gorm.DB) versionEvent {
	v.versionEventDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v versionEvent) replaceDB(db *gorm.DB) versionEvent {
	v.versionEventDo.ReplaceDB(db)
	return v
}

type versionEventDo struct{ gen.DO }

type IVersionEventDo interface {
	gen.SubQuery
	Debug() IVersionEventDo
	WithContext(ctx context.Context) IVersionEventDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IVersionEventDo
	WriteDB() IVersionEventDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IVersionEventDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IVersionEventDo
	Not(conds ...gen.Condition) IVersionEventDo
	Or(conds ...gen.Condition) IVersionEventDo
	Select(conds ...field.Expr) IVersionEventDo
	Where(conds ...gen.Condition) IVersionEventDo
	Order(conds ...field.Expr) IVersionEventDo
	Distinct(cols ...field.Expr) IVersionEventDo
	Omit(cols ...field.Expr) IVersionEventDo
	Join(table schema.Tabler, on ...field.Expr) IVersionEventDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IVersionEventDo
	RightJoin(table schema.Tabler, on ...field.Expr) IVersionEventDo
	Group(cols ...field.Expr) IVersionEventDo
	Having(conds ...gen.Condition) IVersionEventDo
	Limit(limit int) IVersionEventDo
	Offset(offset int) IVersionEventDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IVersionEventDo
	Unscoped() IVersionEventDo
	Create(values ...*model.VersionEvent) error
	CreateInBatches(values []*model.VersionEvent, batchSize int) error
	Save(values ...*model.VersionEvent) error
	First() (*model.VersionEvent, error)
	Take() (*model.VersionEvent, error)
	Last() (*model.VersionEvent, error)
	Find() ([]*model.VersionEvent, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VersionEvent, err error)
	FindInBatches(result *[]*model.VersionEvent, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.VersionEvent) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IVersionEventDo
	Assign(attrs ...field.AssignExpr) IVersionEventDo
	Joins(fields ...field.RelationField) IVersionEventDo
	Preload(fields ...field.RelationField) IVersionEventDo
	FirstOrInit() (*model.VersionEvent, error)
	FirstOrCreate() (*model.VersionEvent, error)
	FindByPage(offset int, limit int) (result []*model.VersionEvent, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IVersionEventDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (v versionEventDo) Debug() IVersionEventDo {
	return v.withDO(v.DO.Debug())
}

func (v versionEventDo) WithContext(ctx context.Context) IVersionEventDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v versionEventDo) ReadDB() IVersionEventDo {
	return v.Clauses(dbresolver.Read)
}

func (v versionEventDo) WriteDB() IVersionEventDo {
	return v.Clauses(dbresolver.Write)
}

func (v versionEventDo) Session(config *gorm.Session) IVersionEventDo {
	return v.withDO(v.DO.Session(config))
}

func (v versionEventDo) Clauses(conds ...clause.Expression) IVersionEventDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v versionEventDo) Returning(value interface{}, columns ...string) IVersionEventDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v versionEventDo) Not(conds ...gen.Condition) IVersionEventDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v versionEventDo) Or(conds ...gen.Condition) IVersionEventDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v versionEventDo) Select(conds ...field.Expr) IVersionEventDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v versionEventDo) Where(conds ...gen.Condition) IVersionEventDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v versionEventDo) Order(conds ...field.Expr) IVersionEventDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v versionEventDo) Distinct(cols ...field.Expr) IVersionEventDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v versionEventDo) Omit(cols ...field.Expr) IVersionEventDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v versionEventDo) Join(table schema.Tabler, on ...field.Expr) IVersionEventDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v versionEventDo) LeftJoin(table schema.Tabler, on ...field.Expr) IVersionEventDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v versionEventDo) RightJoin(table schema.Tabler, on ...field.Expr) IVersionEventDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v versionEventDo) Group(cols ...field.Expr) IVersionEventDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v versionEventDo) Having(conds ...gen.Condition) IVersionEventDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v versionEventDo) Limit(limit int) IVersionEventDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v versionEventDo) Offset(offset int) IVersionEventDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v versionEventDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IVersionEventDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v versionEventDo) Unscoped() IVersionEventDo {
	return v.withDO(v.DO.Unscoped())
}

func (v versionEventDo) Create(values ...*model.VersionEvent) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v versionEventDo) CreateInBatches(values []*model.VersionEvent, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v versionEventDo) Save(values ...*model.VersionEvent) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v versionEventDo) First() (*model.VersionEvent, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.VersionEvent), nil
	}
}

func (v versionEventDo) Take() (*model.VersionEvent, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.VersionEvent), nil
	}
}

func (v versionEventDo) Last() (*model.VersionEvent, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.VersionEvent), nil
	}
}

func (v versionEventDo) Find() ([]*model.VersionEvent, error) {
	result, err := v.DO.Find()
	return result.([]*model.VersionEvent), err
}

func (v versionEventDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VersionEvent, err error) {
	buf := make([]*model.VersionEvent, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v versionEventDo) FindInBatches(result *[]*model.VersionEvent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v versionEventDo) Attrs(attrs ...field.AssignExpr) IVersionEventDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v versionEventDo) Assign(attrs ...field.AssignExpr) IVersionEventDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v versionEventDo) Joins(fields ...field.RelationField) IVersionEventDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v versionEventDo) Preload(fields ...field.RelationField) IVersionEventDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v versionEventDo) FirstOrInit() (*model.VersionEvent, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.VersionEvent), nil
	}
}

func (v versionEventDo) FirstOrCreate() (*model.VersionEvent, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.VersionEvent), nil
	}
}

func (v versionEventDo) FindByPage(offset int, limit int) (result []*model.VersionEvent, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v versionEventDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v versionEventDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v versionEventDo) Delete(models ...*model.VersionEvent) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *versionEventDo) withDO(do gen.Dao) *versionEventDo {
	v.DO = *do.(*gen.DO)
	return v
}
