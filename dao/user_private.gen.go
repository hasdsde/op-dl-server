// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"hasdsd.cn/op-dl-server/model"
)

func newUserPrivate(db *gorm.DB, opts ...gen.DOOption) userPrivate {
	_userPrivate := userPrivate{}

	_userPrivate.userPrivateDo.UseDB(db, opts...)
	_userPrivate.userPrivateDo.UseModel(&model.UserPrivate{})

	tableName := _userPrivate.userPrivateDo.TableName()
	_userPrivate.ALL = field.NewAsterisk(tableName)
	_userPrivate.ID = field.NewInt64(tableName, "id")
	_userPrivate.UserID = field.NewInt64(tableName, "user_id")
	_userPrivate.TodoNum = field.NewInt64(tableName, "todo_num")
	_userPrivate.Todo = field.NewInt64(tableName, "todo")
	_userPrivate.StartTime = field.NewInt64(tableName, "start_time")
	_userPrivate.EndTime = field.NewInt64(tableName, "end_time")
	_userPrivate.CreatedAt = field.NewTime(tableName, "created_at")
	_userPrivate.DeletedAt = field.NewField(tableName, "deleted_at")
	_userPrivate.UpdatedAt = field.NewTime(tableName, "updated_at")
	_userPrivate.AutoUpdate = field.NewString(tableName, "auto_update")
	_userPrivate.UpdateHour = field.NewInt64(tableName, "update_hour")

	_userPrivate.fillFieldMap()

	return _userPrivate
}

type userPrivate struct {
	userPrivateDo

	ALL        field.Asterisk
	ID         field.Int64
	UserID     field.Int64
	TodoNum    field.Int64 // 需要数量
	Todo       field.Int64 // 已完成数量
	StartTime  field.Int64 // 开始时间
	EndTime    field.Int64 // 结束时间
	CreatedAt  field.Time
	DeletedAt  field.Field
	UpdatedAt  field.Time
	AutoUpdate field.String // 自动更新周期
	UpdateHour field.Int64  // 自动更新时间 0或4

	fieldMap map[string]field.Expr
}

func (u userPrivate) Table(newTableName string) *userPrivate {
	u.userPrivateDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userPrivate) As(alias string) *userPrivate {
	u.userPrivateDo.DO = *(u.userPrivateDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userPrivate) updateTableName(table string) *userPrivate {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UserID = field.NewInt64(table, "user_id")
	u.TodoNum = field.NewInt64(table, "todo_num")
	u.Todo = field.NewInt64(table, "todo")
	u.StartTime = field.NewInt64(table, "start_time")
	u.EndTime = field.NewInt64(table, "end_time")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.DeletedAt = field.NewField(table, "deleted_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.AutoUpdate = field.NewString(table, "auto_update")
	u.UpdateHour = field.NewInt64(table, "update_hour")

	u.fillFieldMap()

	return u
}

func (u *userPrivate) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userPrivate) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 11)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["todo_num"] = u.TodoNum
	u.fieldMap["todo"] = u.Todo
	u.fieldMap["start_time"] = u.StartTime
	u.fieldMap["end_time"] = u.EndTime
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["auto_update"] = u.AutoUpdate
	u.fieldMap["update_hour"] = u.UpdateHour
}

func (u userPrivate) clone(db *gorm.DB) userPrivate {
	u.userPrivateDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userPrivate) replaceDB(db *gorm.DB) userPrivate {
	u.userPrivateDo.ReplaceDB(db)
	return u
}

type userPrivateDo struct{ gen.DO }

type IUserPrivateDo interface {
	gen.SubQuery
	Debug() IUserPrivateDo
	WithContext(ctx context.Context) IUserPrivateDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserPrivateDo
	WriteDB() IUserPrivateDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserPrivateDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserPrivateDo
	Not(conds ...gen.Condition) IUserPrivateDo
	Or(conds ...gen.Condition) IUserPrivateDo
	Select(conds ...field.Expr) IUserPrivateDo
	Where(conds ...gen.Condition) IUserPrivateDo
	Order(conds ...field.Expr) IUserPrivateDo
	Distinct(cols ...field.Expr) IUserPrivateDo
	Omit(cols ...field.Expr) IUserPrivateDo
	Join(table schema.Tabler, on ...field.Expr) IUserPrivateDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserPrivateDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserPrivateDo
	Group(cols ...field.Expr) IUserPrivateDo
	Having(conds ...gen.Condition) IUserPrivateDo
	Limit(limit int) IUserPrivateDo
	Offset(offset int) IUserPrivateDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserPrivateDo
	Unscoped() IUserPrivateDo
	Create(values ...*model.UserPrivate) error
	CreateInBatches(values []*model.UserPrivate, batchSize int) error
	Save(values ...*model.UserPrivate) error
	First() (*model.UserPrivate, error)
	Take() (*model.UserPrivate, error)
	Last() (*model.UserPrivate, error)
	Find() ([]*model.UserPrivate, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserPrivate, err error)
	FindInBatches(result *[]*model.UserPrivate, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserPrivate) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserPrivateDo
	Assign(attrs ...field.AssignExpr) IUserPrivateDo
	Joins(fields ...field.RelationField) IUserPrivateDo
	Preload(fields ...field.RelationField) IUserPrivateDo
	FirstOrInit() (*model.UserPrivate, error)
	FirstOrCreate() (*model.UserPrivate, error)
	FindByPage(offset int, limit int) (result []*model.UserPrivate, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserPrivateDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userPrivateDo) Debug() IUserPrivateDo {
	return u.withDO(u.DO.Debug())
}

func (u userPrivateDo) WithContext(ctx context.Context) IUserPrivateDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userPrivateDo) ReadDB() IUserPrivateDo {
	return u.Clauses(dbresolver.Read)
}

func (u userPrivateDo) WriteDB() IUserPrivateDo {
	return u.Clauses(dbresolver.Write)
}

func (u userPrivateDo) Session(config *gorm.Session) IUserPrivateDo {
	return u.withDO(u.DO.Session(config))
}

func (u userPrivateDo) Clauses(conds ...clause.Expression) IUserPrivateDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userPrivateDo) Returning(value interface{}, columns ...string) IUserPrivateDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userPrivateDo) Not(conds ...gen.Condition) IUserPrivateDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userPrivateDo) Or(conds ...gen.Condition) IUserPrivateDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userPrivateDo) Select(conds ...field.Expr) IUserPrivateDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userPrivateDo) Where(conds ...gen.Condition) IUserPrivateDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userPrivateDo) Order(conds ...field.Expr) IUserPrivateDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userPrivateDo) Distinct(cols ...field.Expr) IUserPrivateDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userPrivateDo) Omit(cols ...field.Expr) IUserPrivateDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userPrivateDo) Join(table schema.Tabler, on ...field.Expr) IUserPrivateDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userPrivateDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserPrivateDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userPrivateDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserPrivateDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userPrivateDo) Group(cols ...field.Expr) IUserPrivateDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userPrivateDo) Having(conds ...gen.Condition) IUserPrivateDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userPrivateDo) Limit(limit int) IUserPrivateDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userPrivateDo) Offset(offset int) IUserPrivateDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userPrivateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserPrivateDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userPrivateDo) Unscoped() IUserPrivateDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userPrivateDo) Create(values ...*model.UserPrivate) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userPrivateDo) CreateInBatches(values []*model.UserPrivate, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userPrivateDo) Save(values ...*model.UserPrivate) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userPrivateDo) First() (*model.UserPrivate, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPrivate), nil
	}
}

func (u userPrivateDo) Take() (*model.UserPrivate, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPrivate), nil
	}
}

func (u userPrivateDo) Last() (*model.UserPrivate, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPrivate), nil
	}
}

func (u userPrivateDo) Find() ([]*model.UserPrivate, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserPrivate), err
}

func (u userPrivateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserPrivate, err error) {
	buf := make([]*model.UserPrivate, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userPrivateDo) FindInBatches(result *[]*model.UserPrivate, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userPrivateDo) Attrs(attrs ...field.AssignExpr) IUserPrivateDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userPrivateDo) Assign(attrs ...field.AssignExpr) IUserPrivateDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userPrivateDo) Joins(fields ...field.RelationField) IUserPrivateDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userPrivateDo) Preload(fields ...field.RelationField) IUserPrivateDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userPrivateDo) FirstOrInit() (*model.UserPrivate, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPrivate), nil
	}
}

func (u userPrivateDo) FirstOrCreate() (*model.UserPrivate, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPrivate), nil
	}
}

func (u userPrivateDo) FindByPage(offset int, limit int) (result []*model.UserPrivate, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userPrivateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userPrivateDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userPrivateDo) Delete(models ...*model.UserPrivate) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userPrivateDo) withDO(do gen.Dao) *userPrivateDo {
	u.DO = *do.(*gen.DO)
	return u
}
