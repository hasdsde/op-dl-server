// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"hasdsd.cn/op-dl-server/model"
)

func newVersionTag(db *gorm.DB, opts ...gen.DOOption) versionTag {
	_versionTag := versionTag{}

	_versionTag.versionTagDo.UseDB(db, opts...)
	_versionTag.versionTagDo.UseModel(&model.VersionTag{})

	tableName := _versionTag.versionTagDo.TableName()
	_versionTag.ALL = field.NewAsterisk(tableName)
	_versionTag.ID = field.NewInt64(tableName, "id")
	_versionTag.VersionID = field.NewInt64(tableName, "version_id")
	_versionTag.TagID = field.NewInt64(tableName, "tag_id")
	_versionTag.CreatedAt = field.NewTime(tableName, "created_at")
	_versionTag.UpdatedAt = field.NewTime(tableName, "updated_at")
	_versionTag.DeletedAt = field.NewField(tableName, "deleted_at")

	_versionTag.fillFieldMap()

	return _versionTag
}

type versionTag struct {
	versionTagDo

	ALL       field.Asterisk
	ID        field.Int64
	VersionID field.Int64 // 版本ID
	TagID     field.Int64 // 标签ID
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (v versionTag) Table(newTableName string) *versionTag {
	v.versionTagDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v versionTag) As(alias string) *versionTag {
	v.versionTagDo.DO = *(v.versionTagDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *versionTag) updateTableName(table string) *versionTag {
	v.ALL = field.NewAsterisk(table)
	v.ID = field.NewInt64(table, "id")
	v.VersionID = field.NewInt64(table, "version_id")
	v.TagID = field.NewInt64(table, "tag_id")
	v.CreatedAt = field.NewTime(table, "created_at")
	v.UpdatedAt = field.NewTime(table, "updated_at")
	v.DeletedAt = field.NewField(table, "deleted_at")

	v.fillFieldMap()

	return v
}

func (v *versionTag) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *versionTag) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 6)
	v.fieldMap["id"] = v.ID
	v.fieldMap["version_id"] = v.VersionID
	v.fieldMap["tag_id"] = v.TagID
	v.fieldMap["created_at"] = v.CreatedAt
	v.fieldMap["updated_at"] = v.UpdatedAt
	v.fieldMap["deleted_at"] = v.DeletedAt
}

func (v versionTag) clone(db *gorm.DB) versionTag {
	v.versionTagDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v versionTag) replaceDB(db *gorm.DB) versionTag {
	v.versionTagDo.ReplaceDB(db)
	return v
}

type versionTagDo struct{ gen.DO }

type IVersionTagDo interface {
	gen.SubQuery
	Debug() IVersionTagDo
	WithContext(ctx context.Context) IVersionTagDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IVersionTagDo
	WriteDB() IVersionTagDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IVersionTagDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IVersionTagDo
	Not(conds ...gen.Condition) IVersionTagDo
	Or(conds ...gen.Condition) IVersionTagDo
	Select(conds ...field.Expr) IVersionTagDo
	Where(conds ...gen.Condition) IVersionTagDo
	Order(conds ...field.Expr) IVersionTagDo
	Distinct(cols ...field.Expr) IVersionTagDo
	Omit(cols ...field.Expr) IVersionTagDo
	Join(table schema.Tabler, on ...field.Expr) IVersionTagDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IVersionTagDo
	RightJoin(table schema.Tabler, on ...field.Expr) IVersionTagDo
	Group(cols ...field.Expr) IVersionTagDo
	Having(conds ...gen.Condition) IVersionTagDo
	Limit(limit int) IVersionTagDo
	Offset(offset int) IVersionTagDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IVersionTagDo
	Unscoped() IVersionTagDo
	Create(values ...*model.VersionTag) error
	CreateInBatches(values []*model.VersionTag, batchSize int) error
	Save(values ...*model.VersionTag) error
	First() (*model.VersionTag, error)
	Take() (*model.VersionTag, error)
	Last() (*model.VersionTag, error)
	Find() ([]*model.VersionTag, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VersionTag, err error)
	FindInBatches(result *[]*model.VersionTag, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.VersionTag) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IVersionTagDo
	Assign(attrs ...field.AssignExpr) IVersionTagDo
	Joins(fields ...field.RelationField) IVersionTagDo
	Preload(fields ...field.RelationField) IVersionTagDo
	FirstOrInit() (*model.VersionTag, error)
	FirstOrCreate() (*model.VersionTag, error)
	FindByPage(offset int, limit int) (result []*model.VersionTag, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IVersionTagDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (v versionTagDo) Debug() IVersionTagDo {
	return v.withDO(v.DO.Debug())
}

func (v versionTagDo) WithContext(ctx context.Context) IVersionTagDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v versionTagDo) ReadDB() IVersionTagDo {
	return v.Clauses(dbresolver.Read)
}

func (v versionTagDo) WriteDB() IVersionTagDo {
	return v.Clauses(dbresolver.Write)
}

func (v versionTagDo) Session(config *gorm.Session) IVersionTagDo {
	return v.withDO(v.DO.Session(config))
}

func (v versionTagDo) Clauses(conds ...clause.Expression) IVersionTagDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v versionTagDo) Returning(value interface{}, columns ...string) IVersionTagDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v versionTagDo) Not(conds ...gen.Condition) IVersionTagDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v versionTagDo) Or(conds ...gen.Condition) IVersionTagDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v versionTagDo) Select(conds ...field.Expr) IVersionTagDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v versionTagDo) Where(conds ...gen.Condition) IVersionTagDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v versionTagDo) Order(conds ...field.Expr) IVersionTagDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v versionTagDo) Distinct(cols ...field.Expr) IVersionTagDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v versionTagDo) Omit(cols ...field.Expr) IVersionTagDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v versionTagDo) Join(table schema.Tabler, on ...field.Expr) IVersionTagDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v versionTagDo) LeftJoin(table schema.Tabler, on ...field.Expr) IVersionTagDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v versionTagDo) RightJoin(table schema.Tabler, on ...field.Expr) IVersionTagDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v versionTagDo) Group(cols ...field.Expr) IVersionTagDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v versionTagDo) Having(conds ...gen.Condition) IVersionTagDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v versionTagDo) Limit(limit int) IVersionTagDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v versionTagDo) Offset(offset int) IVersionTagDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v versionTagDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IVersionTagDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v versionTagDo) Unscoped() IVersionTagDo {
	return v.withDO(v.DO.Unscoped())
}

func (v versionTagDo) Create(values ...*model.VersionTag) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v versionTagDo) CreateInBatches(values []*model.VersionTag, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v versionTagDo) Save(values ...*model.VersionTag) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v versionTagDo) First() (*model.VersionTag, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.VersionTag), nil
	}
}

func (v versionTagDo) Take() (*model.VersionTag, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.VersionTag), nil
	}
}

func (v versionTagDo) Last() (*model.VersionTag, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.VersionTag), nil
	}
}

func (v versionTagDo) Find() ([]*model.VersionTag, error) {
	result, err := v.DO.Find()
	return result.([]*model.VersionTag), err
}

func (v versionTagDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VersionTag, err error) {
	buf := make([]*model.VersionTag, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v versionTagDo) FindInBatches(result *[]*model.VersionTag, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v versionTagDo) Attrs(attrs ...field.AssignExpr) IVersionTagDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v versionTagDo) Assign(attrs ...field.AssignExpr) IVersionTagDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v versionTagDo) Joins(fields ...field.RelationField) IVersionTagDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v versionTagDo) Preload(fields ...field.RelationField) IVersionTagDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v versionTagDo) FirstOrInit() (*model.VersionTag, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.VersionTag), nil
	}
}

func (v versionTagDo) FirstOrCreate() (*model.VersionTag, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.VersionTag), nil
	}
}

func (v versionTagDo) FindByPage(offset int, limit int) (result []*model.VersionTag, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v versionTagDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v versionTagDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v versionTagDo) Delete(models ...*model.VersionTag) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *versionTagDo) withDO(do gen.Dao) *versionTagDo {
	v.DO = *do.(*gen.DO)
	return v
}
